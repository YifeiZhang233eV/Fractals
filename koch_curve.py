# -*- coding: utf-8 -*-
"""Koch_Curve.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aA6ynXZ55tcsz7UFJ7kJkx23PNIXJeIJ
"""

import torch
import matplotlib.pyplot as plt

def koch_curve(iterations):
    # Define the initial line segment (starting with the base of the Koch Curve)
    points = torch.tensor([[0.0, 0.0], [1.0, 0.0]])

    # Iterate to create the Koch Curve
    for i in range(iterations):
        # Repeat each point 4 times for the new points to be inserted
        new_points = []
        for j in range(len(points) - 1):
            start_point = points[j]
            end_point = points[j + 1]

            # Calculate the points that subdivide the line segment
            third = (end_point - start_point) / 3.0
            p1 = start_point + third
            p2 = start_point + 2 * third
            # Calculate the peak point of the triangle
            peak = p1 + rotate_60(third)

            # Append the new points to the list
            new_points.extend([start_point, p1, peak, p2])
        new_points.append(points[-1])
        points = torch.stack(new_points)

    return points

def rotate_60(vector):
    # Rotate the direction vector by 60 degrees counterclockwise
    rotation_matrix = torch.tensor([[0.5, -torch.sqrt(torch.tensor(3.0))/2.0],
                                    [torch.sqrt(torch.tensor(3.0))/2.0, 0.5]])
    return torch.matmul(vector, rotation_matrix)

# Parameters
iterations = 4  # Number of iterations to refine the curve

# Generate the Koch curve using PyTorch
points = koch_curve(iterations)

# Visualize the Koch curve
plt.figure(figsize=(8, 8))
plt.plot(points[:, 0].numpy(), points[:, 1].numpy(), color="black")
plt.title("Koch Curve using PyTorch")
plt.axis("equal")
plt.show()